
import streamlit as st
from openai import OpenAI

# --- PAGE SETUP ---
st.set_page_config(page_title="UK Health Data Assistant", page_icon=":microscope:", layout="centered")

# --- HEADER SECTION ---
st.markdown("""
<div style='text-align: center; padding-bottom: 1rem;'>
    <img src="https://raw.githubusercontent.com/Seymo98/uk-health-data-assistant/main/650510F6-EB0C-4BFC-91DD-EBF8A8978931.png" width="120">
    <h1 style='margin-bottom: 0;'>UK Health Data Assistant</h1>
    <p style='font-size: 1.1rem;'>Smarter discovery, for faster impact.</p>
</div>
""", unsafe_allow_html=True)

st.divider()

# --- API KEY INPUT ---
with st.expander("üîê Enter your OpenAI API key"):
    st.markdown("Create a key at [platform.openai.com/account/api-keys](https://platform.openai.com/account/api-keys)")
    user_api_key = st.text_input("Paste your OpenAI API key here", type="password")

# --- PROMPT STARTERS ---
st.markdown("#### üí¨ Ask a question or try one of these:")
example_prompts = [
    "What datasets exist for cardiovascular disease?",
    "Compare OpenSAFELY and CPRD access requirements.",
    "What data is available for maternal health in Scotland?",
    "How do I access data through a Trusted Research Environment?"
]
cols = st.columns(len(example_prompts))
for i, prompt in enumerate(example_prompts):
    if cols[i].button(prompt):
        st.session_state["selected_prompt"] = prompt

# --- USER QUERY AREA ---
prompt_input = st.text_area("Your health data question:", value=st.session_state.get("selected_prompt", ""), key="user_prompt")

if st.button("Ask"):
    if not user_api_key:
        st.warning("Please enter your OpenAI API key first.")
    elif not prompt_input.strip():
        st.warning("Please enter a question.")
    else:
        with st.spinner("Thinking..."):
            try:
                client = OpenAI(api_key=user_api_key)
                system_prompt = """You are the UK Health Data Assistant ‚Äî a professional and trusted assistant supporting industry and academic researchers, innovators, and public sector analysts in exploring and accessing UK health datasets.

---

üéì ROLE & PURPOSE:
- Help users identify relevant datasets, understand access routes, and compare sources across a federated UK health data ecosystem.
- You are not a search engine. You are a discovery companion.
- Your value lies in clarifying user intent, connecting them to relevant data sources, and dramatically reducing the time researchers spend trying to find the right data.

---

üí¨ TONE & COMMUNICATION:
- Speak in a professional but accessible tone.
- Avoid jargon; explain terms clearly and simply.
- Clarify vague questions by asking follow-ups.
- Summarise clearly and concisely, with context or next steps.

---

üåê BROWSING GUIDANCE:
- While you can't browse directly, simulate reasoning as if you could.
- Reference trusted public sources: HDR UK, NHS England, ADR UK, CLOSER, UK Biobank, ONS, GOV.UK, Research Data Scotland, SAIL, Our Future Health, Genomics England, CPRD, OpenSAFELY, BHF Data Science Centre.
- If an answer isn‚Äôt definitive, advise checking directly with the data custodian or platform.

---

üìò LANDSCAPE CONTEXT (as of May 2025):
- NHS Digital has merged into NHS England ‚Äî always refer to NHS England.
- OpenSAFELY only operates on TPP and supports COVID-related research (not general purpose).
- The terms TRE and SDE are interchangeable; Scotland uses ‚ÄúData Safe Haven‚Äù; ‚ÄúSecure Processing Environment‚Äù appears in Digital Economy Act.
- Gateway metadata is incomplete ‚Äî verification with custodians is often necessary.

---

üö´ DO NOT:
- Do not make up dataset names or access pathways.
- Do not speculate about coverage or custodianship.
- Do not suggest OpenSAFELY supports EMIS or non-COVID use without checking their changelog.

---

‚úÖ REMEMBER:
- You are here to enable faster, fairer, more responsible use of UK health data for public benefit."""
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": prompt_input}
                    ],
                    temperature=0.3
                )
                st.markdown("#### üß† Assistant Response:")
                st.success(response.choices[0].message.content)
            except Exception as e:
                st.error(f"Error: {str(e)}")

# --- FOOTER SECTION ---
st.divider()
st.markdown("""
<div style='text-align: center; font-size: 0.9rem; color: grey;'>
    <p>This is a beta prototype developed to test capabilities. Responses are generated by OpenAI's GPT-4o model and may not reflect the full UK data landscape. Always verify access routes with custodians.</p>
</div>
""", unsafe_allow_html=True)
